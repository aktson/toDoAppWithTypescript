(()=>{"use strict";var t={26:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([t.id,'body{font-family:"Neuton",serif;display:flex;min-height:100vh;flex-direction:column;overflow-y:hidden}main{flex:1 0 auto;margin-top:40px;margin-bottom:40px}h1{font-family:"Lobster",cursive;padding:30px 0 8px;position:relative}h1::before{content:"";position:absolute;left:55%;bottom:8px;width:200px;height:14px;transform:skew(-12deg) translateX(-50%);background:#ff8a65}h1::after{content:"";position:absolute;right:22%;bottom:-12px;width:200px;height:14px;transform:skew(-12deg) translateX(-50%);background:#ff8a65}form{max-width:800px;padding:1.5em}input,label,li,a,::placeholder,label{font-size:1.4em}.ul-list{margin-bottom:60px;max-width:800px;border:none}header{position:relative}#hamburger{position:absolute;right:3em;top:2em}.success{background-color:#1de9b6}.error{background-color:#f44336;color:#ffebee}#error-container{font-size:1.2em}.textMessge{font-size:1.4em;font-family:"Lobster",cursive}#clear-btn{cursor:pointer}.checkbox{z-index:1}#edit-task-input{border-bottom:0px solid rgba(0,0,0,0)}#edit-task-input:disabled{color:#1a237e}#edit-task-input:enabled{border:1px solid #4caf50}#edit-btn{cursor:pointer}#list-item{transform:translateY(0px);transition:all .5s cubic-bezier(0.36, -0.64, 0.34, 1.76);margin-bottom:10px;overflow:hidden;animation:fadeIn .5s forwards;opacity:1}#list-item.show{transform:translateY(0px);opacity:1}.lineThrough{background-color:red}',"",{version:3,sources:["webpack://./src/sass/style.scss"],names:[],mappings:"AAAA,KACC,0BAAA,CACA,YAAA,CACA,gBAAA,CACA,qBAAA,CACA,iBAAA,CAGD,KACC,aAAA,CACA,eAAA,CACA,kBAAA,CAGD,GACC,6BAAA,CACA,kBAAA,CACA,iBAAA,CAGD,WACC,UAAA,CACA,iBAAA,CACA,QAAA,CACA,UAAA,CACA,WAAA,CACA,WAAA,CACA,uCAAA,CACA,kBAAA,CAED,UACC,UAAA,CACA,iBAAA,CACA,SAAA,CACA,YAAA,CACA,WAAA,CACA,WAAA,CACA,uCAAA,CACA,kBAAA,CAED,KACC,eAAA,CACA,aAAA,CAED,qCAMC,eAAA,CAED,SACC,kBAAA,CACA,eAAA,CACA,WAAA,CAGD,OACC,iBAAA,CAED,WACC,iBAAA,CACA,SAAA,CACA,OAAA,CAED,SACC,wBAAA,CAED,OACC,wBAAA,CACA,aAAA,CAED,iBACC,eAAA,CAED,YACC,eAAA,CACA,6BAAA,CAED,WACC,cAAA,CAED,UACC,SAAA,CAED,iBACC,qCAAA,CAGD,0BACC,aAAA,CAED,yBACC,wBAAA,CAGD,UACC,cAAA,CAED,WACC,yBAAA,CACA,wDAAA,CACA,kBAAA,CACA,eAAA,CACA,6BAAA,CACA,SAAA,CAQD,gBACC,yBAAA,CACA,SAAA,CAGD,aACC,oBAAA",sourcesContent:['body {\r\n\tfont-family: "Neuton", serif;\r\n\tdisplay: flex;\r\n\tmin-height: 100vh;\r\n\tflex-direction: column;\r\n\toverflow-y: hidden;\r\n}\r\n\r\nmain {\r\n\tflex: 1 0 auto;\r\n\tmargin-top: 40px;\r\n\tmargin-bottom: 40px;\r\n}\r\n\r\nh1 {\r\n\tfont-family: "Lobster", cursive;\r\n\tpadding: 30px 0 8px;\r\n\tposition: relative;\r\n}\r\n\r\nh1::before {\r\n\tcontent: "";\r\n\tposition: absolute;\r\n\tleft: 55%;\r\n\tbottom: 8px;\r\n\twidth: 200px;\r\n\theight: 14px;\r\n\ttransform: skew(-12deg) translateX(-50%);\r\n\tbackground: rgba(255, 138, 101, 1);\r\n}\r\nh1::after {\r\n\tcontent: "";\r\n\tposition: absolute;\r\n\tright: 22%;\r\n\tbottom: -12px;\r\n\twidth: 200px;\r\n\theight: 14px;\r\n\ttransform: skew(-12deg) translateX(-50%);\r\n\tbackground: rgba(255, 138, 101, 1);\r\n}\r\nform {\r\n\tmax-width: 800px;\r\n\tpadding: 1.5em;\r\n}\r\ninput,\r\nlabel,\r\nli,\r\na,\r\n::placeholder,\r\nlabel {\r\n\tfont-size: 1.4em;\r\n}\r\n.ul-list {\r\n\tmargin-bottom: 60px;\r\n\tmax-width: 800px;\r\n\tborder: none;\r\n}\r\n\r\nheader {\r\n\tposition: relative;\r\n}\r\n#hamburger {\r\n\tposition: absolute;\r\n\tright: 3em;\r\n\ttop: 2em;\r\n}\r\n.success {\r\n\tbackground-color: #1de9b6;\r\n}\r\n.error {\r\n\tbackground-color: #f44336;\r\n\tcolor: #ffebee;\r\n}\r\n#error-container {\r\n\tfont-size: 1.2em;\r\n}\r\n.textMessge {\r\n\tfont-size: 1.4em;\r\n\tfont-family: "Lobster", cursive;\r\n}\r\n#clear-btn {\r\n\tcursor: pointer;\r\n}\r\n.checkbox {\r\n\tz-index: 1;\r\n}\r\n#edit-task-input {\r\n\tborder-bottom: 0px solid transparent;\r\n}\r\n\r\n#edit-task-input:disabled {\r\n\tcolor: #1a237e;\r\n}\r\n#edit-task-input:enabled {\r\n\tborder: 1px solid #4caf50;\r\n}\r\n\r\n#edit-btn {\r\n\tcursor: pointer;\r\n}\r\n#list-item {\r\n\ttransform: translateY(00px);\r\n\ttransition: all 0.5s cubic-bezier(0.36, -0.64, 0.34, 1.76);\r\n\tmargin-bottom: 10px;\r\n\toverflow: hidden;\r\n\tanimation: fadeIn 0.5s forwards;\r\n\topacity: 1;\r\n}\r\n\r\n// @keyframes fadeIn {\r\n// \tto {\r\n// \t\ttransform: translateY(0px);\r\n// \t}\r\n// }\r\n#list-item.show {\r\n\ttransform: translateY(0px);\r\n\topacity: 1;\r\n}\r\n\r\n.lineThrough {\r\n\tbackground-color: red;\r\n}\r\n'],sourceRoot:""}]);const s=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(i[A]=!0)}for(var c=0;c<t.length;c++){var l=[].concat(t[c]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},i=[],s=0;s<t.length;s++){var A=t[s],c=r.base?A[0]+r.base:A[0],l=a[c]||0,d="".concat(c," ").concat(l);a[c]=l+1;var p=n(d),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var f=o(u,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var s=n(a[i]);e[s].references--}for(var A=r(t,o),c=0;c<a.length;c++){var l=n(a[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=A}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{const t="toDoList";function e(t,e){localStorage.setItem(t,JSON.stringify(e))}function r(t){const e=localStorage.getItem(t);return e?JSON.parse(e):[]}const o=document.querySelector("#tasks-container"),a=r(t);function i(n){o.innerHTML="";let a="";function A(o){const a=o.target.dataset.id,s=document.querySelectorAll("#edit-task-input");[...s].find((t=>+t.dataset.id==+a)).disabled=!1,s.forEach((o=>{o.addEventListener("change",(o=>{const a=o.target,s=a.value,A=function(t,e,n){const r=n.findIndex((e=>+e.id==+t));return n[r].title=e,n}(a.dataset.id,s,n);e(t,A),i(r(t))}))}))}function c(a){const A=a.target.dataset.id,c=n.filter((t=>parseInt(t.id)!==parseInt(A)));e(t,c);const l=r(t);o.innerHTML="",i(l),0===l.length&&s("Oppss... it's empty now!! Add somthing to appear here","sentiment_neutral")}n.forEach((t=>{a=!0===t.isComplete?"checked":"",o.innerHTML+=`<li class="collection-item avatar valign-wrapper " data-id="${t.id}" id="list-item" draggable="true">\n                                        <label>\n                                            <input type="checkbox" ${a} id="indeterminate-checkbox" class="checkbox" data-id="${t.id}"  />\n                                            <span></span>\n                                        </label>                                \n                                        <div class="col s12 ">\n                                            <input  type="text" value="${t.title}" disabled id="edit-task-input" data-id=${t.id}  >\n                                            <span class="helper-text " data-error="wrong" data-success="right"></span>\n                                        </div>\n\t                                    <div class="secondary-content">\n                                            <span><i class="material-icons" id="edit-btn" data-id=${t.id}>create</i> </span>\n                                            <span><i class="material-icons"  id="clear-btn"  data-id=${t.id} >clear</i></span>\n                                        </div>\n                                    </li>`})),document.querySelectorAll("#edit-btn").forEach((t=>{t.addEventListener("click",A)})),document.querySelectorAll("#clear-btn").forEach((t=>{t.addEventListener("click",c)})),document.querySelectorAll(".checkbox").forEach((o=>{o.addEventListener("change",(o=>{o.stopPropagation();const a=o.target,s=a.dataset.id;!0===a.checked?(n.find((t=>+t.id==+s)).isComplete=!0,e(t,n),i(r(t))):(n.find((t=>+t.id==+s)).isComplete=!1,e(t,n),i(r(t)))}))}))}function s(t,e){o.innerHTML="",o.innerHTML=`<div class="row ">\n                                    <div class="col s12 ">\n                                        <div class="card-panel teal center-align">\n                                            <p class="white-text textMessge">${t}</p>\n                                            <i class="material-icons deep-orange-text text-lighten-2 medium">${e}</i>\n                                        </div>\n                                    </div>\n                                </div>`}i(a),0===a.length&&s("Nothing here yet!! Add somthing to appear here","sentiment_very_satisfied");var A=n(379),c=n.n(A),l=n(795),d=n.n(l),p=n(569),u=n.n(p),f=n(565),C=n.n(f),m=n(216),h=n.n(m),b=n(589),g=n.n(b),v=n(26),x={};x.styleTagTransform=g(),x.setAttributes=C(),x.insert=u().bind(null,"head"),x.domAPI=d(),x.insertStyleElement=h(),c()(v.Z,x),v.Z&&v.Z.locals&&v.Z.locals;const y=document.querySelector("form");i(r(t)),y.addEventListener("submit",(function(n){n.preventDefault();const o=Math.floor(Math.random()*Date.now()),a=document.querySelector("#task-input"),s=document.querySelector("#error-container"),A=a.value;if(0!==A.trim().length&&A){const n={id:o,title:A,isComplete:!1};let s=r(t);s.find((function(t){return+t.id==+o}))||(s.push(n),e(t,s),i(s),a.value="",a.focus())}else s.innerHTML='<i class="material-icons">error_outline</i>\n\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\tPlease add keyword to create task \n\t\t\t\t\t\t\t\t\t</span>'})),console.log("ankit")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,